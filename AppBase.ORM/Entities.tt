<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="AppBase.ORM" #>
<#@ output extension=".cs" #>
<#
var modelPath = Path.Combine(
Host.ResolveAssemblyReference("$(ProjectDir)"),
"CompleteModel.json"
);
var model = Model.Load(modelPath);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppBase.ORM.Entities
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;
<#
foreach (var entity in model.Entities)
{
	var lists = new Dictionary<string, string>();
#>

	#region <#= entity.Name #>
	public partial class <#= entity.Name #> : BaseEntity
	{
<#
	foreach (var field in entity.Fields.OrderBy(x => !string.IsNullOrEmpty(x.Relation)))
	{
		var type = string.IsNullOrEmpty(field.Relation) 
			? field.GetFieldType() 
			: model.GetEntityType(field.Relation, entity);
		if (type.StartsWith("List<"))
			lists.Add(field.FieldName, type);
#>
		/// <summary>
		/// Get or set <#= field.FieldName #>
		/// </summary>
		public <#= type #> <#= field.FieldName #> { get; set; }

<#
	}
#>
		public <#= entity.Name #>()
		{
<#
		foreach (var item in lists)
		{
#>
			<#= item.Key #> = new <#= item.Value #>();
<#
		}
#>
		}
	}

	public partial class <#= entity.Name #>Repository : BaseRepository
	{
	}
	#endregion
<#
}
#>
}
