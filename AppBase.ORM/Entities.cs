//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppBase.ORM.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    #region User
    public partial class User : BaseEntity
    {
        /// <summary>
        /// Get or set UserName
        /// </summary>
        public System.String UserName { get; set; }

        /// <summary>
        /// Get or set Email
        /// </summary>
        public System.String Email { get; set; }

        /// <summary>
        /// Get or set FirstName
        /// </summary>
        public System.String FirstName { get; set; }

        /// <summary>
        /// Get or set LastName
        /// </summary>
        public System.String LastName { get; set; }

        /// <summary>
        /// Get or set BirthDate
        /// </summary>
        public Nullable<System.DateTime> BirthDate { get; set; }

        /// <summary>
        /// Get or set Roles
        /// </summary>
        public BaseEntityCollection<Role> Roles { get; internal set; }

        public User()
        {
            Roles = new BaseEntityCollection<Role>();
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new UserRepository(conn);
        }
    }

    public partial class UserRepository : BaseRepository
    {
        public UserRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(User), typeof(Role), typeof(UserInRole), typeof(Function), typeof(Right) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is User))
                throw new ModelException(
                    "UserRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (User)entity;

            #region Validate fields
            if (typedEntity.UserName == null)
                throw new ArgumentNullException("entity.UserName");
            if (typedEntity.Email == null)
                throw new ArgumentNullException("entity.Email");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert User
                cmd.CommandText = @"
                    INSERT INTO [dbo].[Users] ([UserName], [Email], [FirstName], [LastName], [BirthDate]) VALUES
                        (@UserName, @Email, @FirstName, @LastName, @BirthDate);
                    ";
                cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                cmd.Parameters.AddWithValue("@Email", typedEntity.Email);
                cmd.Parameters.AddWithValue("@FirstName", typedEntity.FirstName ?? (object)DBNull.Value);
                cmd.Parameters.AddWithValue("@LastName", typedEntity.LastName ?? (object)DBNull.Value);
                cmd.Parameters.AddWithValue("@BirthDate", typedEntity.BirthDate ?? (object)DBNull.Value);
                Debug.WriteLine("UserRepository.InsertOrUpdate: INSERT INTO [dbo].[Users]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                cmd.ExecuteNonQuery();
                #endregion

                #region Insert UserInRole
                foreach (var item in typedEntity.Roles)
                {
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        INSERT INTO [dbo].[UserInRoles] ([UserName], [RoleName]) VALUES
                            (@UserName, @RoleName);
                        ";
                    cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                    cmd.Parameters.AddWithValue("@RoleName", item.RoleName);
                    Debug.WriteLine("UserRepository.InsertOrUpdate: INSERT INTO [dbo].[UserInRoles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                    cmd.ExecuteNonQuery();
                }
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is User))
                throw new ModelException(
                    "UserRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (User)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                #region Delete UserInRole
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[UserInRoles] WHERE
                        ([UserName] = @UserName);
                    ";
                cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                Debug.WriteLine("UserRepository.Delete: DELETE FROM [dbo].[UserInRoles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                cmd.ExecuteNonQuery();
                #endregion

                var tempRoles = typedEntity.Roles;
                typedEntity.Roles = null;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                typedEntity.Roles = tempRoles;

                #region Delete User
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[Users] WHERE
                        ([UserName] = @UserName);
                    ";
                cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                Debug.WriteLine("UserRepository.Delete: DELETE FROM [dbo].[Users]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion

    #region UserInRole
    public partial class UserInRole : BaseEntity
    {
        /// <summary>
        /// Get or set UserName
        /// </summary>
        public System.String UserName { get; set; }

        /// <summary>
        /// Get or set RoleName
        /// </summary>
        public System.String RoleName { get; set; }

        /// <summary>
        /// Get or set User
        /// </summary>
        public User User { get; set; }

        /// <summary>
        /// Get or set Role
        /// </summary>
        public Role Role { get; set; }

        public UserInRole()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new UserInRoleRepository(conn);
        }
    }

    public partial class UserInRoleRepository : BaseRepository
    {
        public UserInRoleRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(User), typeof(Role), typeof(UserInRole), typeof(Function), typeof(Right) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is UserInRole))
                throw new ModelException(
                    "UserInRoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (UserInRole)entity;

            #region Validate fields
            if (typedEntity.UserName == null)
                throw new ArgumentNullException("entity.UserName");
            if (typedEntity.RoleName == null)
                throw new ArgumentNullException("entity.RoleName");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert UserInRole
                cmd.CommandText = @"
                    INSERT INTO [dbo].[UserInRoles] ([UserName], [RoleName]) VALUES
                        (@UserName, @RoleName);
                    ";
                cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("UserInRoleRepository.InsertOrUpdate: INSERT INTO [dbo].[UserInRoles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "UserName=" + typedEntity.UserName + ";" + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is UserInRole))
                throw new ModelException(
                    "UserInRoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (UserInRole)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                var tempUser = typedEntity.User;
                typedEntity.User = null;
                var tempRole = typedEntity.Role;
                typedEntity.Role = null;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                typedEntity.User = tempUser;
                typedEntity.Role = tempRole;

                #region Delete UserInRole
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[UserInRoles] WHERE
                        ([UserName] = @UserName AND [RoleName] = @RoleName);
                    ";
                cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("UserInRoleRepository.Delete: DELETE FROM [dbo].[UserInRoles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "UserName=" + typedEntity.UserName + "; " + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion

    #region Role
    public partial class Role : BaseEntity
    {
        /// <summary>
        /// Get or set RoleName
        /// </summary>
        public System.String RoleName { get; set; }

        /// <summary>
        /// Get or set Users
        /// </summary>
        public BaseEntityCollection<User> Users { get; internal set; }

        /// <summary>
        /// Get or set Rights
        /// </summary>
        public BaseEntityCollection<Right> Rights { get; internal set; }

        public Role()
        {
            Users = new BaseEntityCollection<User>();
            Rights = new BaseEntityCollection<Right>();
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new RoleRepository(conn);
        }
    }

    public partial class RoleRepository : BaseRepository
    {
        public RoleRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Role), typeof(User), typeof(UserInRole), typeof(Function), typeof(Right) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Role))
                throw new ModelException(
                    "RoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Role)entity;

            #region Validate fields
            if (typedEntity.RoleName == null)
                throw new ArgumentNullException("entity.RoleName");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert Role
                cmd.CommandText = @"
                    INSERT INTO [dbo].[Roles] ([RoleName]) VALUES
                        (@RoleName);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("RoleRepository.InsertOrUpdate: INSERT INTO [dbo].[Roles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion

                #region Insert UserInRole
                foreach (var item in typedEntity.Users)
                {
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        INSERT INTO [dbo].[UserInRoles] ([RoleName], [UserName]) VALUES
                            (@RoleName, @UserName);
                        ";
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                    cmd.Parameters.AddWithValue("@UserName", item.UserName);
                    Debug.WriteLine("RoleRepository.InsertOrUpdate: INSERT INTO [dbo].[UserInRoles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                    cmd.ExecuteNonQuery();
                }
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Role))
                throw new ModelException(
                    "RoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Role)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                #region Delete UserInRole
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[UserInRoles] WHERE
                        ([RoleName] = @RoleName);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("RoleRepository.Delete: DELETE FROM [dbo].[UserInRoles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion

                #region Delete Right
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[Rights] WHERE
                        ([RoleName] = @RoleName);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("RoleRepository.Delete: DELETE FROM [dbo].[Rights]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion

                var tempUsers = typedEntity.Users;
                typedEntity.Users = null;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                typedEntity.Users = tempUsers;

                #region Delete Role
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[Roles] WHERE
                        ([RoleName] = @RoleName);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("RoleRepository.Delete: DELETE FROM [dbo].[Roles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion

    #region Right
    public partial class Right : BaseEntity
    {
        /// <summary>
        /// Get or set RoleName
        /// </summary>
        public System.String RoleName { get; set; }

        /// <summary>
        /// Get or set FunctionName
        /// </summary>
        public System.String FunctionName { get; set; }

        /// <summary>
        /// Get or set IsEnabled
        /// </summary>
        public System.Boolean IsEnabled { get; set; }

        /// <summary>
        /// Get or set Function
        /// </summary>
        public Function Function { get; set; }

        /// <summary>
        /// Get or set Role
        /// </summary>
        public Role Role { get; set; }

        public Right()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new RightRepository(conn);
        }
    }

    public partial class RightRepository : BaseRepository
    {
        public RightRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Function), typeof(Role), typeof(Right), typeof(User), typeof(UserInRole) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Right))
                throw new ModelException(
                    "RightRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Right)entity;

            #region Validate fields
            if (typedEntity.RoleName == null)
                throw new ArgumentNullException("entity.RoleName");
            if (typedEntity.FunctionName == null)
                throw new ArgumentNullException("entity.FunctionName");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert Right
                cmd.CommandText = @"
                    INSERT INTO [dbo].[Rights] ([RoleName], [FunctionName], [IsEnabled]) VALUES
                        (@RoleName, @FunctionName, @IsEnabled);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                cmd.Parameters.AddWithValue("@FunctionName", typedEntity.FunctionName);
                cmd.Parameters.AddWithValue("@IsEnabled", typedEntity.IsEnabled);
                Debug.WriteLine("RightRepository.InsertOrUpdate: INSERT INTO [dbo].[Rights]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName + ";" + "FunctionName=" + typedEntity.FunctionName);
                cmd.ExecuteNonQuery();
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Right))
                throw new ModelException(
                    "RightRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Right)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                var tempFunction = typedEntity.Function;
                typedEntity.Function = null;
                var tempRole = typedEntity.Role;
                typedEntity.Role = null;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                typedEntity.Function = tempFunction;
                typedEntity.Role = tempRole;

                #region Delete Right
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[Rights] WHERE
                        ([RoleName] = @RoleName AND [FunctionName] = @FunctionName);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                cmd.Parameters.AddWithValue("@FunctionName", typedEntity.FunctionName);
                Debug.WriteLine("RightRepository.Delete: DELETE FROM [dbo].[Rights]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName + "; " + "FunctionName=" + typedEntity.FunctionName);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion

    #region Tab
    public partial class Tab : BaseEntity
    {
        /// <summary>
        /// Get or set Cod
        /// </summary>
        public System.String Cod { get; set; }

        /// <summary>
        /// Get or set Description
        /// </summary>
        public System.String Description { get; set; }

        /// <summary>
        /// Get or set Rows
        /// </summary>
        public BaseEntityCollection<TabRow> Rows { get; internal set; }

        public Tab()
        {
            Rows = new BaseEntityCollection<TabRow>();
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new TabRepository(conn);
        }
    }

    public partial class TabRepository : BaseRepository
    {
        public TabRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Tab), typeof(TabRow), typeof(TabRowDetail) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Tab))
                throw new ModelException(
                    "TabRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Tab)entity;

            #region Validate fields
            if (typedEntity.Cod == null)
                throw new ArgumentNullException("entity.Cod");
            if (typedEntity.Description == null)
                throw new ArgumentNullException("entity.Description");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert Tab
                cmd.CommandText = @"
                    INSERT INTO [dbo].[Tabs] ([Cod], [Description]) VALUES
                        (@Cod, @Description);
                    ";
                cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                cmd.Parameters.AddWithValue("@Description", typedEntity.Description);
                Debug.WriteLine("TabRepository.InsertOrUpdate: INSERT INTO [dbo].[Tabs]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Tab))
                throw new ModelException(
                    "TabRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Tab)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                #region Delete TabRow
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[TabRows] WHERE
                        ([CodTab] = @Cod);
                    ";
                cmd.Parameters.AddWithValue("@CodTab", typedEntity.Cod);
                Debug.WriteLine("TabRepository.Delete: DELETE FROM [dbo].[TabRows]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                #region Delete Tab
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[Tabs] WHERE
                        ([Cod] = @Cod);
                    ";
                cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                Debug.WriteLine("TabRepository.Delete: DELETE FROM [dbo].[Tabs]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion

    #region TabRow
    public partial class TabRow : BaseEntity
    {
        /// <summary>
        /// Get or set CodTab
        /// </summary>
        public System.String CodTab { get; set; }

        /// <summary>
        /// Get or set Cod
        /// </summary>
        public System.String Cod { get; set; }

        /// <summary>
        /// Get or set Description
        /// </summary>
        public System.String Description { get; set; }

        /// <summary>
        /// Get or set Tab
        /// </summary>
        public Tab Tab { get; set; }

        /// <summary>
        /// Get or set Detail
        /// </summary>
        public TabRowDetail Detail { get; set; }

        public TabRow()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new TabRowRepository(conn);
        }
    }

    public partial class TabRowRepository : BaseRepository
    {
        public TabRowRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Tab), typeof(TabRow), typeof(TabRowDetail) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRow))
                throw new ModelException(
                    "TabRowRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRow)entity;

            #region Validate fields
            if (typedEntity.CodTab == null)
                throw new ArgumentNullException("entity.CodTab");
            if (typedEntity.Cod == null)
                throw new ArgumentNullException("entity.Cod");
            if (typedEntity.Description == null)
                throw new ArgumentNullException("entity.Description");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert TabRow
                cmd.CommandText = @"
                    INSERT INTO [dbo].[TabRows] ([CodTab], [Cod], [Description]) VALUES
                        (@CodTab, @Cod, @Description);
                    ";
                cmd.Parameters.AddWithValue("@CodTab", typedEntity.CodTab);
                cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                cmd.Parameters.AddWithValue("@Description", typedEntity.Description);
                Debug.WriteLine("TabRowRepository.InsertOrUpdate: INSERT INTO [dbo].[TabRows]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + ";" + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRow))
                throw new ModelException(
                    "TabRowRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRow)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                var tempTab = typedEntity.Tab;
                typedEntity.Tab = null;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                typedEntity.Tab = tempTab;

                #region Delete TabRow
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[TabRows] WHERE
                        ([CodTab] = @CodTab AND [Cod] = @Cod);
                    ";
                cmd.Parameters.AddWithValue("@CodTab", typedEntity.CodTab);
                cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                Debug.WriteLine("TabRowRepository.Delete: DELETE FROM [dbo].[TabRows]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + "; " + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion

    #region TabRowDetail
    public partial class TabRowDetail : BaseEntity
    {
        /// <summary>
        /// Get or set CodTab
        /// </summary>
        public System.String CodTab { get; set; }

        /// <summary>
        /// Get or set Cod
        /// </summary>
        public System.String Cod { get; set; }

        /// <summary>
        /// Get or set Pos
        /// </summary>
        public Nullable<System.Int32> Pos { get; set; }

        /// <summary>
        /// Get or set ExtraInfo
        /// </summary>
        public System.String ExtraInfo { get; set; }

        /// <summary>
        /// Get or set TabRow
        /// </summary>
        public TabRow TabRow { get; set; }

        public TabRowDetail()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new TabRowDetailRepository(conn);
        }
    }

    public partial class TabRowDetailRepository : BaseRepository
    {
        public TabRowDetailRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(TabRowDetail), typeof(Tab), typeof(TabRow) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRowDetail))
                throw new ModelException(
                    "TabRowDetailRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRowDetail)entity;

            #region Validate fields
            if (typedEntity.CodTab == null)
                throw new ArgumentNullException("entity.CodTab");
            if (typedEntity.Cod == null)
                throw new ArgumentNullException("entity.Cod");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert TabRowDetail
                cmd.CommandText = @"
                    INSERT INTO [dbo].[TabRowDetails] ([CodTab], [Cod], [Pos], [ExtraInfo]) VALUES
                        (@CodTab, @Cod, @Pos, @ExtraInfo);
                    ";
                cmd.Parameters.AddWithValue("@CodTab", typedEntity.CodTab);
                cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                cmd.Parameters.AddWithValue("@Pos", typedEntity.Pos ?? (object)DBNull.Value);
                cmd.Parameters.AddWithValue("@ExtraInfo", typedEntity.ExtraInfo ?? (object)DBNull.Value);
                Debug.WriteLine("TabRowDetailRepository.InsertOrUpdate: INSERT INTO [dbo].[TabRowDetails]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + ";" + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRowDetail))
                throw new ModelException(
                    "TabRowDetailRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRowDetail)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                #region Delete TabRowDetail
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[TabRowDetails] WHERE
                        ([CodTab] = @CodTab AND [Cod] = @Cod);
                    ";
                cmd.Parameters.AddWithValue("@CodTab", typedEntity.CodTab);
                cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                Debug.WriteLine("TabRowDetailRepository.Delete: DELETE FROM [dbo].[TabRowDetails]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + "; " + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion

    #region Function
    public partial class Function : BaseEntity
    {
        /// <summary>
        /// Get or set FunctionName
        /// </summary>
        public System.String FunctionName { get; set; }

        public Function()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new FunctionRepository(conn);
        }
    }

    public partial class FunctionRepository : BaseRepository
    {
        public FunctionRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Function) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Function))
                throw new ModelException(
                    "FunctionRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Function)entity;

            #region Validate fields
            if (typedEntity.FunctionName == null)
                throw new ArgumentNullException("entity.FunctionName");
            #endregion

            Delete(entity, tr, skipNestedObjects);

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);

                #region Insert Function
                cmd.CommandText = @"
                    INSERT INTO [dbo].[Functions] ([FunctionName]) VALUES
                        (@FunctionName);
                    ";
                cmd.Parameters.AddWithValue("@FunctionName", typedEntity.FunctionName);
                Debug.WriteLine("FunctionRepository.InsertOrUpdate: INSERT INTO [dbo].[Functions]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "FunctionName=" + typedEntity.FunctionName);
                cmd.ExecuteNonQuery();
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Function))
                throw new ModelException(
                    "FunctionRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Function)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                    foreach (var nestedEntity in typedEntity.Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        if (nestedEntity != typedEntity)
                            nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                #region Delete Function
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[Functions] WHERE
                        ([FunctionName] = @FunctionName);
                    ";
                cmd.Parameters.AddWithValue("@FunctionName", typedEntity.FunctionName);
                Debug.WriteLine("FunctionRepository.Delete: DELETE FROM [dbo].[Functions]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "FunctionName=" + typedEntity.FunctionName);
                cmd.ExecuteNonQuery();
                #endregion
            }
        }
    }
    #endregion
}
